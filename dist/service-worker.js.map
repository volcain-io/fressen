{"version":3,"sources":["service-worker.js"],"names":["CACHE_VERSION","STATIC_CACHE_NAME","CONTENT_IMGS_CACHE","self","GOOGLE_MAP_API_KEY","event","urlsToPrefetch","cache","response","waitUntil","caches","open","then","addAll","_loop","foreignUrlToPrefetch","request","Request","mode","fetch","put","catch","console","error","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","foreignUrlsToPrefetch","Symbol","iterator","next","done","value","err","return","addEventListener","keys","cacheNames","Promise","all","filter","cacheName","startsWith","ALL_CACHES","includes","map","delete","requestUrl","URL","url","origin","location","pathname","respondWith","_serveMap","match","cached","Response","_servePhoto","storageUrl","replace","clone","data","action","skipWaiting"],"mappings":"aAAA,IAAMA,cAAgB,EAChBC,kBAAAA,mBAAuCD,cADvCA,mBAAN,uBACMC,YAAAA,kBAAAA,oBACAC,mBAAqB,0CAE3BC,KAAMC,iBAAAA,UAAqB,SAAAC,GAGzB,IAAMC,GADRH,IACE,eAWA,oBAPE,kBAYFE,uBAEIE,iCAXF,iCAU6C,kCAIzC,mBAGIA,GACD,uEADoBC,yHAR7BH,EAAMI,UACyCC,OAAAC,KAAAV,mBAAAW,KAAA,SAAAL,GAAAA,EAAAM,OAAAP,GAAA,IAAAQ,EAAA,SAGlCC,GAHkC,IAAAC,EAAA,IAAAC,QAAAF,GAAAG,KAAA,YAG3CC,MAAAH,GAAwDJ,KAA/CG,SAAAA,GAIHR,EAAMa,IAAIJ,EAASR,KAKxBa,MAAA,WAZ0CC,QAAAC,MAAA,4BAAAP,MAAAQ,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAG3C,IAAA,IAAAC,EAAAC,EAAiCC,EAAjCC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAwD,CAAAV,EAAAc,EAAAO,QAHb,MAAAC,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,KAAAZ,GAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,QAAA,GAAAZ,EAAA,MAAAC,SAAAvB,KAAAmC,iBAAA,WAAA,SAAAjC,GAAAA,EAAAI,UAAAC,OAAA6B,OAAA3B,KAAA,SAAA4B,GAAA,OAAAC,QAAAC,IAAAF,EAAAG,OAAA,SAAAC,GAAA,OAAAA,EAAAC,WAAA5C,qBAAA6C,WAAAC,SAAAH,KAlBjDI,IAAA,SAAAJ,GA4CYlC,OAAOuC,OAAOL,WACfzC,KANHmC,iBADF,QAAA,SAAAjC,GASD,IAXH6C,EAAA,IAAAC,IAAA9C,EAAAW,QAAAoC,KAkBA,GAAIF,EAAWG,SAAWC,SAASD,OAAQ,CAH7ClD,GAAKmC,EAAAA,SAAiBS,SAAS,mBAMzB,YALAG,EAAAA,YAAiBC,OAAI9C,MAAMW,sBAG7B,GAAIkC,EAAWK,SAASR,SAAS,QAE/B,YADA1C,EAAMmD,YAAY9C,YAAAL,EAAaW,UAI/BX,EAAMmD,KAAAA,SAANnD,OAA8BA,oBAC9BA,EAAAmD,YAAAC,UAAApD,EAAAW,UAIFX,EAAAA,YACAK,OAAAgD,MAAArD,EAAAW,SAAAJ,KAAA,SAAA+C,GACD,OAAAA,GAAAxC,MAAAd,EAAAW,cAOF,IAvBDyC,UAAA,SAAAzC,GA0BE,OAAOG,MAAMH,GAASK,MAAM,WAAA,OAAM,IAAIuC,SAAJ,iBAANC,YAAUD,SAAAA,GAAV,IAA5BE,EAAA9C,EAAAoC,IAAAW,QAAA,wBAAA,IAMA,OAAOrD,OAAOC,KAAKT,oBAAoBU,KAAK,SAAAL,GAHxCsD,OAAAA,EAAAA,MAAcC,GAAdD,KAAc,SAAAF,GACZG,OAAAA,GAECpD,MAAOC,GACZC,KAAOL,SAAAA,GAMD,OALAoD,EAAJvC,IAAY0C,EAAAtD,EAAAwD,SAKDxD,IADPD,MAAMa,WACNE,QAAOd,MAAP,4BAAAQ,UAOTb,KAjBDmC,iBAAA,UAAA,SAAAjC,GAoB4B,gBAAtBA,EAAM4D,KAAKC,QAA0B/D,KAAKgE","file":"service-worker.js","sourcesContent":["const CACHE_VERSION = 5;\nconst STATIC_CACHE_NAME = `fressen-static-v${CACHE_VERSION}`;\nconst CONTENT_IMGS_CACHE = 'fressen-content-imgs';\nconst ALL_CACHES = [STATIC_CACHE_NAME, CONTENT_IMGS_CACHE];\nconst GOOGLE_MAP_API_KEY = 'AIzaSyBni5ZJUEvoGfyJO2yCNTbDW9B2eIs1pDE';\n\nself.addEventListener('install', event => {\n  const urlsToPrefetch = [\n    '.',\n    './index.html',\n    './restaurant.html',\n    './css/index.css',\n    './css/restaurant.css',\n    './css/restaurant-min-600px.css',\n    './css/restaurant-min-850px.css',\n    './css/restaurant-min-1000px.css',\n    './app.bundle.js'\n  ];\n  const foreignUrlsToPrefetch = [\n    'https://polyfill.io/v2/polyfill.min.js?features=IntersectionObserver',\n    `https://maps.googleapis.com/maps/api/js?key=AIzaSyBni5ZJUEvoGfyJO2yCNTbDW9B2eIs1pDE&libraries=places&callback=initMap`\n  ];\n\n  event.waitUntil(\n    caches.open(STATIC_CACHE_NAME).then(cache => {\n      cache.addAll(urlsToPrefetch);\n\n      for (let foreignUrlToPrefetch of foreignUrlsToPrefetch) {\n        const request = new Request(foreignUrlToPrefetch, { mode: 'no-cors' });\n        fetch(request)\n          .then(response => {\n            cache.put(request, response);\n          })\n          .catch(() => {\n            console.error(`Fetching request failed: ${request}`);\n          });\n      }\n    })\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames\n          .filter(\n            cacheName => cacheName.startsWith(STATIC_CACHE_NAME) && !ALL_CACHES.includes(cacheName)\n          )\n          .map(cacheName => {\n            caches.delete(cacheName);\n          })\n      );\n    })\n  );\n});\n\nself.addEventListener('fetch', event => {\n  let requestUrl = new URL(event.request.url);\n\n  if (requestUrl.origin === location.origin) {\n    if (requestUrl.pathname.includes('restaurant.html')) {\n      event.respondWith(caches.match('./restaurant.html'));\n      return;\n    }\n    if (requestUrl.pathname.includes('/img')) {\n      event.respondWith(_servePhoto(event.request));\n      return;\n    }\n  }\n  if (requestUrl.href.includes(`key=${GOOGLE_MAP_API_KEY}`)) {\n    event.respondWith(_serveMap(event.request));\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request).then(cached => {\n      return cached || fetch(event.request);\n    })\n  );\n});\n\nconst _serveMap = request => {\n  return fetch(request).catch(() => new Response(`initMap();`));\n};\n\nconst _servePhoto = request => {\n  const storageUrl = request.url.replace(/(-small)*(@2x)*\\.jpg$/, '');\n\n  return caches.open(CONTENT_IMGS_CACHE).then(cache => {\n    return cache.match(storageUrl).then(cached => {\n      if (cached) return cached;\n\n      return fetch(request)\n        .then(response => {\n          cache.put(storageUrl, response.clone());\n          return response;\n        })\n        .catch(() => {\n          console.error(`Fetching request failed: ${request}`);\n        });\n    });\n  });\n};\n\nself.addEventListener('message', event => {\n  if (event.data.action === 'skipWaiting') self.skipWaiting();\n});\n"]}